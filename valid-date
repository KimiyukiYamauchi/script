#!/bin/bash

# valid-date - 入力された日付が有効かどうかを確認する。うるう年も考慮する。

exceedsDaysInMonth()
{
	# 月と日を引数として受け取り、指定された日がその月の日の範囲に収まっている
	# 場合には 0 を返し、そうでない場合には、1 を返す。

	case $(echo $1 | tr '[:upper:]' '[:lower:]') in
		jan*) days=31		;;	feb*) days=28		;;
		mar*)	days=31		;;	apr*)	days=30		;;
		may*)	days=31		;;	jun*)	days=30		;;
		jul*)	days=31		;;	aug*)	days=31		;;
		sep*)	days=30		;;	oct*)	days=31		;;
		nov*)	days=30		;;	dec)	days=31		;;
		*) echo "$0: Unknown month name $1" >&2; exit 1
	esac

	if [ $2 -lt 1 -o $2 -gt $days ] ; then
		return 1
	else
		return 0	# 有効な日
	fi
}

isLeepYear()
{
	# うるう年なら 0 を返し、そうでない場合には 1 を返す関数
	# うるう年かどうかの判定は、次のようにして行う。
	# 1. 4で割り切れない年はうるう年でない。
	# 2. 4でも400でも割り切れる年はうるう年である。
	# 3. 4で割り切れるが400で割り切れず、100で割り切れる年は、うるう年ではない。
	# 4. それ以外の4で割り切れるすべての年はうるう年である。

	year=$1
	if [ "$((year % 4))" -ne 0 ] ; then
		return 1	# うるう年でない
	elif [ "$((year % 400))" -eq 0 ] ; then
		return 0	# うるう年である
	elif [ "$((year % 100))" -eq 0 ] ; then
		return 1 
	else
		return 0
	fi
}

## スクリプト本体

if [ $# -ne 3 ] ; then
	echo "Usage: $0 month day year" >&2
	echo #Typical input formats are Auguest3 1962 and 8 3 2002" >&2
	exit 1
fi

newdate="$(normdate "$@")"

if [ $? -eq 1 ] ; then
	exit 1								# エラーメッセージは normdate で出力済み
fi

month="$(echo $newdate | cut -d\  -f1)"
day="$(echo $newdate | cut -d\  -f2)"
year="$(echo $newdate | cut -d\  -f3)"

# 日付の形式は整えられた。日の値が有効かどうかを確認する。

if ! exceedsDaysInMonth $month "$2" ; then
	if [ "$month" = "Feb" -a "$2" -eq "29" ] ; then
		if ! isLeepYear $3 ; then
			echo "$0: $3 is not a leep year, so Feb doesn't have 29 days" >&2
			exit 1
		fi
	else
		echo "$0: bad day value: $month doesn't have $2 days" >&2
		exit 1
	fi
fi

echo "valid date: $newdate"

exit 0
